var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
import { Icons } from "./icons";
import { Button } from "@/common/components/ui/button";
import { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle, } from "@/common/components/ui/card";
import { Input } from "@/common/components/ui/input";
import { Label } from "@/common/components/ui/label";
import { RadioGroup, RadioGroupItem } from "@/common/components/ui/radio-group";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue, } from "@/common/components/ui/select";
export default function AdminPay() {
    return (_jsxs("div", { className: "container", children: [_jsx("div", { className: "pb-25", children: _jsx(Button, { className: "white", children: "asd" }) }), _jsxs("div", { className: "flex gap-6", children: [_jsx("div", { className: "w-1/4", children: _jsxs(Card, { className: "h-full shadow-md transition-all duration-300 ease-in-out hover:shadow-lg", children: [_jsxs(CardHeader, { children: [_jsx(CardTitle, { children: "Add an Expense" }), _jsx(CardDescription, { children: "Describe your expense below" })] }), _jsx(CardContent, { children: _jsxs("form", { className: "space-y-4", children: [_jsxs("div", { className: "flex flex-col space-y-1.5", children: [_jsx(Label, { htmlFor: "expense-name", children: "Expense Name" }), _jsx(Input, { id: "expense-name", placeholder: "e.g. Lunch with clients" })] }), _jsxs("div", { className: "flex flex-col space-y-1.5", children: [_jsx(Label, { htmlFor: "due-date", children: "Date Due" }), _jsx(Input, { id: "due-date", type: "date" })] }), _jsxs("div", { className: "flex flex-col space-y-1.5", children: [_jsx(Label, { htmlFor: "amount", children: "Amount Paying" }), _jsx(Input, { id: "amount", type: "number", placeholder: "e.g. 200.00" })] }), _jsxs("div", { className: "flex flex-col space-y-1.5", children: [_jsx(Label, { htmlFor: "notes", children: "Notes" }), _jsx(Input, { id: "notes", placeholder: "Optional notes..." })] })] }) }), _jsxs(CardFooter, { className: "flex justify-between", children: [_jsx(Button, { variant: "outline", children: "Cancel" }), _jsx(Button, { children: "Submit" })] })] }) }), _jsx("div", { className: "w-3/4", children: _jsxs(Card, { className: "h-full", children: [_jsxs(CardHeader, { children: [_jsx(CardTitle, { children: "Payment Method" }), _jsx(CardDescription, { children: "Add a new payment method to your account." })] }), _jsxs(CardContent, { className: "grid gap-6", children: [_jsxs(RadioGroup, { defaultValue: "card", className: "grid grid-cols-3 gap-4", children: [_jsxs("div", { children: [_jsx(RadioGroupItem, { value: "card", id: "card", className: "peer sr-only", "aria-label": "Card" }), _jsxs(Label, { htmlFor: "card", className: "flex flex-col items-center justify-between rounded-md border-2 border-muted bg-transparent p-4 hover:bg-accent hover:text-accent-foreground peer-data-[state=checked]:border-primary [&:has([data-state=checked])]:border-primary", children: [_jsxs("svg", { xmlns: "http://www.w3.org/2000/svg", viewBox: "0 0 24 24", fill: "none", stroke: "currentColor", strokeLinecap: "round", strokeLinejoin: "round", strokeWidth: "2", className: "mb-3 h-6 w-6", children: [_jsx("rect", { width: "20", height: "14", x: "2", y: "5", rx: "2" }), _jsx("path", { d: "M2 10h20" })] }), "Card"] })] }), _jsxs("div", { children: [_jsx(RadioGroupItem, { value: "paypal", id: "paypal", className: "peer sr-only", "aria-label": "Paypal" }), _jsxs(Label, { htmlFor: "paypal", className: "flex flex-col items-center justify-between rounded-md border-2 border-muted bg-transparent p-4 hover:bg-accent hover:text-accent-foreground peer-data-[state=checked]:border-primary [&:has([data-state=checked])]:border-primary", children: [_jsx(Icons.paypal, { className: "mb-3 h-6 w-6" }), "Paypal"] })] }), _jsxs("div", { children: [_jsx(RadioGroupItem, { value: "apple", id: "apple", className: "peer sr-only", "aria-label": "Apple" }), _jsxs(Label, { htmlFor: "apple", className: "flex flex-col items-center justify-between rounded-md border-2 border-muted bg-transparent p-4 hover:bg-accent hover:text-accent-foreground peer-data-[state=checked]:border-primary [&:has([data-state=checked])]:border-primary", children: [_jsx(Icons.apple, { className: "mb-3 h-6 w-6" }), "Apple"] })] })] }), _jsxs("div", { className: "grid gap-2", children: [_jsx(Label, { htmlFor: "name", children: "Name" }), _jsx(Input, { id: "name", placeholder: "First Last" })] }), _jsxs("div", { className: "grid gap-2", children: [_jsx(Label, { htmlFor: "city", children: "City" }), _jsx(Input, { id: "city", placeholder: "" })] }), _jsxs("div", { className: "grid gap-2", children: [_jsx(Label, { htmlFor: "number", children: "Card number" }), _jsx(Input, { id: "number", placeholder: "" })] }), _jsxs("div", { className: "grid grid-cols-3 gap-4", children: [_jsxs("div", { className: "grid gap-2", children: [_jsx(Label, { htmlFor: "month", children: "Expires" }), _jsxs(Select, { children: [_jsx(SelectTrigger, { id: "month", "aria-label": "Month", children: _jsx(SelectValue, { placeholder: "Month" }) }), _jsx(SelectContent, { children: __spreadArray([], Array(12), true).map(function (_, i) { return (_jsx(SelectItem, { value: "".concat(i + 1), children: new Date(0, i).toLocaleString("default", { month: "long" }) }, i + 1)); }) })] })] }), _jsxs("div", { className: "grid gap-2", children: [_jsx(Label, { htmlFor: "year", children: "Year" }), _jsxs(Select, { children: [_jsx(SelectTrigger, { id: "year", "aria-label": "Year", children: _jsx(SelectValue, { placeholder: "Year" }) }), _jsx(SelectContent, { children: Array.from({ length: 10 }, function (_, i) {
                                                                        var year = new Date().getFullYear() + i;
                                                                        return (_jsx(SelectItem, { value: "".concat(year), children: year }, year));
                                                                    }) })] })] }), _jsxs("div", { className: "grid gap-2", children: [_jsx(Label, { htmlFor: "cvc", children: "CVC" }), _jsx(Input, { id: "cvc", placeholder: "CVC" })] })] })] }), _jsx(CardFooter, { children: _jsx(Button, { className: "w-full", children: "Continue" }) })] }) })] })] }));
}
